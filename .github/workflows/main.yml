name: Build Android APK

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ANDROIDSDK: $HOME/android-sdk
      ANDROIDNDKVER: "25c"
      APP_NAME: VarnaBanker
      APP_VERSION: 1.0

    steps:
      # --------------------------
      # Checkout repository
      # --------------------------
      - name: Checkout repository
        uses: actions/checkout@v4

      # --------------------------
      # Setup Python
      # --------------------------
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      # --------------------------
      # Cache Buildozer, pip
      # --------------------------
      - name: Cache Buildozer and pip
        uses: actions/cache@v3
        with:
          path: |
            ~/.buildozer
            ~/.cache/pip
          key: buildozer-cache-${{ runner.os }}-${{ hashFiles('**/buildozer.spec') }}
          restore-keys: |
            buildozer-cache-${{ runner.os }}-

      # --------------------------
      # Cache Gradle
      # --------------------------
      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-cache-${{ runner.os }}-v1
          restore-keys: gradle-cache-${{ runner.os }}-

      # --------------------------
      # Cache Android SDK
      # --------------------------
      - name: Cache Android SDK
        uses: actions/cache@v3
        with:
          path: ${{ env.ANDROIDSDK }}
          key: android-sdk-cache-${{ runner.os }}-v1
          restore-keys: android-sdk-cache-${{ runner.os }}-

      # --------------------------
      # Install system dependencies
      # --------------------------
      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y python3-pip git zip unzip openjdk-17-jdk wget curl
          pip install --upgrade pip
          pip install buildozer cython virtualenv

      # --------------------------
      # Install Android SDK & Build Tools (only if cache missed)
      # --------------------------
      - name: Install Android SDK and Build Tools
        if: steps.cache-android-sdk.outputs.cache-hit != 'true'
        run: |
          mkdir -p $ANDROIDSDK/cmdline-tools
          cd $ANDROIDSDK/cmdline-tools

          # Download command-line tools
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          unzip -o commandlinetools-linux-9477386_latest.zip

          # Move inner folder to 'latest' (fix folder structure)
          mkdir -p latest
          mv cmdline-tools/* latest/

          # Verify sdkmanager exists
          if [ ! -f "$ANDROIDSDK/cmdline-tools/latest/bin/sdkmanager" ]; then
            echo "sdkmanager not found!"
            ls -R $ANDROIDSDK/cmdline-tools/latest
            exit 1
          fi

          # Accept licenses
          yes | $ANDROIDSDK/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROIDSDK --licenses

          # Install required SDK components
          yes | $ANDROIDSDK/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROIDSDK \
            "platforms;android-33" "build-tools;33.0.2" "platform-tools"

          # Verify aidl exists
          find $ANDROIDSDK/build-tools -name aidl || (echo "AIDL not found" && exit 1)

      # --------------------------
      # Clean previous Buildozer builds
      # --------------------------
      - name: Clean previous Buildozer builds
        run: |
          buildozer android clean || true
          rm -rf ~/.buildozer/android/platform/python-for-android || true

      # --------------------------
      # Build APK
      # --------------------------
      - name: Build APK
        run: |
          buildozer android debug || (cat ~/.buildozer/android/platform/build-arm64-v8a/dists/*/build.log && exit 1)

      # --------------------------
      # Rename APK with version
      # --------------------------
      - name: Rename APK with version
        run: |
          APK_SRC=$(find bin/ -name "*.apk" | head -n1)
          APK_DST="bin/${APP_NAME}-v${APP_VERSION}.apk"
          mv "$APK_SRC" "$APK_DST"
          echo "APK renamed to $APK_DST"
        shell: bash

      # --------------------------
      # Upload APK artifact
      # --------------------------
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-APK
          path: bin/*.apk
