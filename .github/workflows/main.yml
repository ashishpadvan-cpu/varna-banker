name: Build Android APK

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ANDROIDSDK: ${{ runner.home }}/android-sdk
      ANDROIDNDKVER: "25c"
      APP_NAME: VarnaBanker
      APP_VERSION: 1.0

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache Buildozer and pip
        uses: actions/cache@v3
        with:
          path: |
            ~/.buildozer
            ~/.cache/pip
          key: buildozer-cache-${{ runner.os }}-${{ hashFiles('**/buildozer.spec') }}
          restore-keys: |
            buildozer-cache-${{ runner.os }}-

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-cache-${{ runner.os }}-v1
          restore-keys: gradle-cache-${{ runner.os }}-

      - name: Cache Android SDK
        uses: actions/cache@v3
        id: cache-android-sdk
        with:
          path: ${{ env.ANDROIDSDK }}
          key: android-sdk-cache-${{ runner.os }}-v1
          restore-keys: android-sdk-cache-${{ runner.os }}-

      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y python3-pip git zip unzip openjdk-17-jdk wget curl
          python -m pip install --upgrade pip
          pip install buildozer cython virtualenv

      # Export Android / Java env vars for subsequent steps
      - name: Export Android and Java env vars
        run: |
          echo "ANDROID_SDK_ROOT=${ANDROIDSDK}" >> $GITHUB_ENV
          echo "ANDROID_HOME=${ANDROIDSDK}" >> $GITHUB_ENV
          echo "JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64" >> $GITHUB_ENV
          echo "PATH=${ANDROIDSDK}/cmdline-tools/latest/bin:${ANDROIDSDK}/platform-tools:${PATH}" >> $GITHUB_ENV
        shell: bash

      - name: Install Android SDK and Build Tools (if cache missed)
        if: steps.cache-android-sdk.outputs.cache-hit != 'true'
        run: |
          mkdir -p $ANDROIDSDK/cmdline-tools
          cd $ANDROIDSDK/cmdline-tools

          # Download command-line tools
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O tools.zip
          unzip -o tools.zip

          # Detect inner folder (handles any ZIP layout)
          INNER_DIR=$(find . -maxdepth 1 -type d -name "cmdline-tools*" | head -n1)
          if [ -z "$INNER_DIR" ]; then
              echo "No inner cmdline-tools folder found!"
              ls -R
              exit 1
          fi

          # Move contents to 'latest' layout expected by sdkmanager
          mkdir -p latest
          mv "$INNER_DIR"/* latest/ || true

          # Ensure sdkmanager exists
          if [ ! -f "$ANDROIDSDK/cmdline-tools/latest/bin/sdkmanager" ]; then
              echo "sdkmanager still not found!"
              ls -R $ANDROIDSDK/cmdline-tools/latest
              exit 1
          fi

          # Accept licenses and install platform tools + build-tools
          yes | $ANDROIDSDK/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROIDSDK --licenses

          yes | $ANDROIDSDK/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROIDSDK \
            "platforms;android-33" "build-tools;33.0.2" "platform-tools"

          # (Optional) If you require an NDK version for p4a, install here, e.g.:
          # yes | $ANDROIDSDK/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROIDSDK "ndk;21.4.7075529"

          # Verify AIDL exists (part of build-tools)
          find $ANDROIDSDK/build-tools -name aidl || (echo "AIDL not found" && exit 1)

      - name: Clean previous Buildozer builds
        run: |
          buildozer android clean || true
          rm -rf ~/.buildozer/android/platform/python-for-android || true

      - name: Build APK (verbose)
        run: |
          set -o pipefail
          # verbose output helps debugging failures
          buildozer -v android debug 2>&1 | tee buildozer-run.log || (echo "Buildozer failed, printing build logs..." && \
            if [ -d "~/.buildozer/android/platform/build-arm64-v8a/dists" ]; then \
              cat ~/.buildozer/android/platform/build-arm64-v8a/dists/*/build.log || true; \
            fi; \
            tail -n 500 buildozer-run.log; \
            exit 1)
        shell: bash

      - name: Rename APK with version
        run: |
          APK_SRC=$(find bin/ -name "*.apk" | head -n1)
          if [ -z "$APK_SRC" ]; then
            echo "No APK produced in bin/"
            ls -R bin || true
            exit 1
          fi
          APK_DST="bin/${APP_NAME}-v${APP_VERSION}.apk"
          mv "$APK_SRC" "$APK_DST"
          echo "APK renamed to $APK_DST"
        shell: bash

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-APK
          path: bin/*.apk
